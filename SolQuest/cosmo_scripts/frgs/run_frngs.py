import argparse
import glob
import os
import re
import shutil
import signal
import subprocess
import tempfile
from timeit import default_timer as timer

import numpy as np
import pandas as pd
from joblib import Parallel, delayed
from natsort import index_natsorted, natsorted


class Alarm(Exception):
    pass


def alarm_handler(signum, frame):
    raise Alarm


def gen_inp(molecule_name, basis, T=25.0):
    data_dir = "{}_c*".format(molecule_name)

    input_file = open("cosmo.inp", "w")

    if basis == "TZVPD":
        input_file.write(
            'ctd = BP_TZVPD_FINE_21.ctd cdir = "/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOthermX/../COSMOtherm/CTDATA-FILES" ldir = "/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOthermX/../licensefiles"\n'
        )
    if basis == "TZVP":
        input_file.write(
            'ctd = BP_TZVP_21.ctd cdir = "/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOthermX/../COSMOtherm/CTDATA-FILES" ldir = "/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOthermX/../licensefiles"\n'
        )
    if basis == "SVP":
        input_file.write(
            'ctd = BP_SVP_AM1_21.ctd cdir = "/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOthermX/../COSMOtherm/CTDATA-FILES" ldir = "/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOthermX/../licensefiles"\n'
        )

    input_file.write("notempty wtln ehfile\n")
    input_file.write("!! generated by COSMOthermX !!\n")

    curr_cnfs = sorted(np.array([f for f in glob.glob(data_dir) if "cosmo" in f]))

    if len(curr_cnfs) == 1:
        p0 = 'f = "{}_c0.cosmo" '.format(molecule_name)
        p1 = "fdir=."
        p2 = " VPfile"
        input_file.write(p0 + p1 + p2 + "\n")

    else:
        for ind, c in enumerate(curr_cnfs):
            if ind == 0:
                p0 = 'f = "{}_c0.cosmo" '.format(molecule_name)
                p1 = "fdir=."
                p1b = ' Comp= "{}"'.format(molecule_name)
                p2 = " [    VPfile"
                input_file.write(p0 + p1 + p1b + p2 + "\n")

            elif ind == len(curr_cnfs) - 1:
                p0 = 'f = "{}_c{}.cosmo" '.format(molecule_name, ind)
                p1 = "fdir=."
                p2 = " ]"
                input_file.write(p0 + p1 + p2 + "\n")

            else:
                p0 = 'f = "{}_c{}.cosmo" '.format(molecule_name, ind)
                p1 = "fdir=."
                input_file.write(p0 + p1 + "\n")

    if basis == "TZVPD":  ##/COSMOtherm/DATABASE-COSMO/BP-TZVPD-FINE/c
        input_file.write(
            'f = "h2o_c0.cosmo" fdir="/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOtherm/DATABASE-COSMO/BP-TZVPD-FINE/h" VPfile '
            + "\n"
        )
    if basis == "TZVP":
        input_file.write(
            'f = "h2o_c0.cosmo" fdir="/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOtherm/DATABASE-COSMO/BP-TZVP-COSMO/h" VPfile '
            + "\n"
        )
    if basis == "SVP":
        input_file.write(
            'f = "h2o_c0.cosmo" fdir="/store/jan/cosmo_install/therm/COSMOtherm2021/COSMOtherm/DATABASE-COSMO/BP-SVP-AM1/h" VPfile '
            + "\n"
        )

    input_file.write(
        "henry= {} tc={} GSOLV # Automatic Henry Law coefficient Calculation".format(2, T)
    )

    input_file.close()


def COSMOTHERM_MOL(molecule_name, basis, T):
    cosmo_out_now = open(
        "/home/jan/projects/FML/cosmodata/cosmo_scripts/frgs/{}.csv".format(args.OUT), "a"
    )
    tmp_dir = tempfile.TemporaryDirectory()
    tmp_dir_path = tmp_dir.name

    currdG = False

    cosmo_files = sorted(
        np.array(
            [f for f in glob.glob(args.PATH + "/{}_c*".format(molecule_name)) if "cosmo" in f]
        )
    )
    energy_files = sorted(
        np.array(
            [f for f in glob.glob(args.PATH + "/{}_c*".format(molecule_name)) if "energy" in f]
        )
    )

    for f1, f2 in zip(cosmo_files, energy_files):
        shutil.copy(f1, tmp_dir_path)
        shutil.copy(f2, tmp_dir_path)

    try:
        os.chdir(tmp_dir_path)
        gen_inp(molecule_name, basis, T)
        signal.signal(signal.SIGALRM, alarm_handler)
        signal.alarm(30 * 60)  # 5 minutes

        try:
            subprocess.run(["cosmotherm", "cosmo.inp", "-n 1"])
            signal.alarm(0)
        except Alarm:
            print("Oops, taking too long!")
            tmp_dir.cleanup()
            cosmo_out_now.close()
            return [molecule_name, T, np.nan]

        os.chdir(cwd)
        file = open(tmp_dir_path + "/cosmo.out", "r")

        for line in file:
            if re.search("Gibbs Free Energy of Solvation", line):
                if currdG == False:
                    currdG = float(line.split(":")[-1].split("k")[0])
                    cosmo_out_now.flush()
                    cosmo_out_now.write("{},{},{}\n".format(molecule_name, T + 273.15, currdG))
                    cosmo_out_now.close()
                    print(molecule_name, T, currdG)

                    return [molecule_name, T, currdG]

                else:
                    print(molecule_name, T, currdG)
                    return [molecule_name, T, np.nan]

            if re.search(" Henry law coefficient            ", line):
                if currdG == False:
                    henry_const = float(line.split(":")[-1].split("b")[0])

                    if henry_const > 1e10:
                        print(molecule_name, T, currdG)
                        cosmo_out_now.close()
                        return [molecule_name, T, np.nan]

    except Exception as e:
        print(tmp_dir_path)
        print(molecule_name, T, currdG)
        cosmo_out_now.close()
        return [molecule_name, T, np.nan]

    tmp_dir.cleanup()
    cosmo_out_now.close()


if __name__ == "__main__":
    # python run_cosmotherm_3.py -PATH ./BP-TZVPD-FINE -OUT lvlX.outfast -mode txt -Tl 20 -Th 25
    cwd = os.getcwd()
    parser = argparse.ArgumentParser(description="INPUT PATH")
    parser.add_argument("-PATH")
    parser.add_argument("-OUT")
    parser.add_argument("-Tl", default=25)
    parser.add_argument("-Th", default=25)
    parser.add_argument("-nCPU", default=48)
    parser.add_argument("-mode", default="csv")
    parser.add_argument("-basis", default="TZVPD")
    parser.add_argument("-name", default="FreeSolv")

    args = parser.parse_args()

    # Just keep celsius!!!!!!!
    Tl, Th = float(args.Tl), float(args.Th)
    basis = args.basis

    data_dir = "{}/".format(args.PATH) + "*_c0*"
    files = sorted(glob.glob(data_dir))

    cosmo_out_now = open("{}.csv".format(args.OUT), "a")
    cosmo_out_now.write("Compound,T,Gsolv\n")
    cosmo_out_now.close()

    name_tag = args.name
    if name_tag == "amonsGDB":
        allMols = natsorted(
            np.array(
                [
                    "AG7_" + f.split("/")[-1].split(".")[0].split("_")[1]
                    for f in files
                    if "cosmo" in f
                ]
            )
        )

    if name_tag == "amonsZINC":
        allMols = natsorted(
            np.array(
                [
                    "AZ7_" + f.split("/")[-1].split(".")[0].split("_")[1]
                    for f in files
                    if "cosmo" in f
                ]
            )
        )

    if name_tag == "FreeSolv":
        allMols = natsorted(
            np.array(
                [
                    "mobley_" + f.split("/")[-1].split(".")[0].split("_")[1]
                    for f in files
                    if "cosmo" in f
                ]
            )
        )

    if name_tag == "gdb17":
        allMols = natsorted(
            np.array([f.split("/")[-1].split(".")[0].split("_")[0] for f in files if "cosmo" in f])
        )

    # pdb.set_trace()

    """
    before it was just this
    allMols = natsorted(np.array(["mobley_"+f.split("/")[-1].split(".")[0].split("_")[1] for f in files if "cosmo" in f]))
    """

    if Tl == Th:
        start = timer()  # here from args!!! different from above Th or Tl
        results = np.array(
            Parallel(n_jobs=int(args.nCPU))(
                delayed(COSMOTHERM_MOL)(molecule_name, basis, args.Tl) for molecule_name in allMols
            )
        )

    else:
        start = timer()
        Trange = np.arange(Tl, Th, 5.0)
        results = []
        for currT in Trange:
            results.append(
                Parallel(n_jobs=int(args.nCPU))(
                    delayed(COSMOTHERM_MOL)(molecule_name, basis, currT)
                    for molecule_name in allMols
                )
            )

    results = np.concatenate(np.array(results))

    print(results)
    print(results.shape)
    end = timer()
    print(end - start)

    """
    problem is that for some cosmo gives an error, therefore print result directly
    this lead to an error earlier

    units in Celsius!!!!!
    """

    # and finally output everything in kelvin
    exit()
    mol_names, Tvals, dGvalues = results[:, 0], (np.float_(results[:, 1]) + 273.15), results[:, 2]
    if args.mode == "txt":
        cosmo_out = open("{}.out".format(args.OUT), "w")

        for m, cT, dG in zip(mol_names, Tvals, dGvalues):
            cosmo_out.flush()
            cosmo_out.write("{}\t{}\t{}\n".format(m, cT, dG))

        cosmo_out.close()

    if args.mode == "csv":
        data = pd.DataFrame()
        data["Compound"], data["Gsolv"], data["T"] = mol_names, dGvalues, Tvals
        # print(natsorted(data.Compound.values))
        # data = data.reindex(index=natsorted(data.Compound.values))

        data = data.iloc[index_natsorted(data.Compound.values)]
        # = data.sort_values(by='Compound', key=natsorted(data.Compound.values))
        data = data.reset_index()
        data = data.drop(columns=["index"])
        data.to_csv(r"{}.csv".format(args.OUT))
